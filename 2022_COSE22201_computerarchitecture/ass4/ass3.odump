
ass3_2018130508.o:     file format elf32-littleriscv
ass3_2018130508.o
architecture: riscv:rv32, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000040  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000100  00000000  00000000  000000d0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000001d0  2**0
                  ALLOC
  3 .debug_line   000000d6  00000000  00000000  000001d0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_info   00000026  00000000  00000000  000002a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000014  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_aranges 00000020  00000000  00000000  000002e0  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    0000003c  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .riscv.attributes 0000001a  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l       .data	00000000 Input_data
0000000c l       .text	00000000 .L0 
00000080 l       .data	00000000 Output_data
00000014 l       .text	00000000 .L0 
0000001c l       .text	00000000 .L0 
00000020 l       .text	00000000 .L0 
00000024 l       .text	00000000 .L0 
00000028 l       .text	00000000 .L0 
0000002c l       .text	00000000 sort
0000002c l       .text	00000000 .L0 
00000034 l       .text	00000000 .L0 
00000038 l       .text	00000000 .L0 
0000003c l       .text	00000000 .L0 
00000060 l       .text	00000000 findmax
00000040 l       .text	00000000 .L0 
00000048 l       .text	00000000 .L0 
0000004c l       .text	00000000 .L0 
00000050 l       .text	00000000 .L0 
00000054 l       .text	00000000 .L0 
00000084 l       .text	00000000 done
00000058 l       .text	00000000 .L0 
0000005c l       .text	00000000 .L0 
00000060 l       .text	00000000 .L0 
00000070 l       .text	00000000 cont
00000064 l       .text	00000000 .L0 
00000068 l       .text	00000000 .L0 
0000006c l       .text	00000000 .L0 
00000070 l       .text	00000000 .L0 
00000080 l       .text	00000000 break
00000074 l       .text	00000000 .L0 
00000078 l       .text	00000000 .L0 
0000007c l       .text	00000000 .L0 
00000080 l       .text	00000000 .L0 
00000084 l       .text	00000000 .L0 
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l       .text	00000000 .L0 
00000084 l       .text	00000000 .L0 
00000000 l       .debug_str	00000000 .L0 
00000012 l       .debug_str	00000000 .L0 
00000030 l       .debug_str	00000000 .L0 
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
0000000c l       .text	00000000 .L0 
00000014 l       .text	00000000 .L0 
0000002c l       .text	00000000 .L0 
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
0000000c g       .text	00000000 __start



Disassembly of section .text:

00000000 <__start-0xc>:
   0:	00000013          	nop
			0: R_RISCV_ALIGN	*ABS*+0xc
   4:	00000013          	nop
   8:	00000013          	nop

0000000c <__start>:
.globl __start
.text
.align 4

__start:
              la a0, Input_data         # initialize / load addr to a0
   c:	00000517          	auipc	a0,0x0
			c: R_RISCV_PCREL_HI20	Input_data
			c: R_RISCV_RELAX	*ABS*
  10:	00050513          	mv	a0,a0
			10: R_RISCV_PCREL_LO12_I	.L0 
			10: R_RISCV_RELAX	*ABS*
              la a1, Output_data        # initialize / load addr to a1
  14:	00000597          	auipc	a1,0x0
			14: R_RISCV_PCREL_HI20	Output_data
			14: R_RISCV_RELAX	*ABS*
  18:	00058593          	mv	a1,a1
			18: R_RISCV_PCREL_LO12_I	.L0 
			18: R_RISCV_RELAX	*ABS*
              sub a2, a1, a0            # get dist between input and output
  1c:	40a58633          	sub	a2,a1,a0
              srai a2, a2, 2            # div by 4 since 1w = 4B (a2 = 0x20)
  20:	40265613          	srai	a2,a2,0x2
              mv a3, a2                 # copy that data         (a3 = 0x20)
  24:	00060693          	mv	a3,a2
              li t0, -17                # load t0 to -17 / selected num will replaced to -17(-inf)
  28:	fef00293          	li	t0,-17

0000002c <sort>:

              
sort:                                   # this is kind of selection sort
              la a0, Input_data         # init a0 again cuz loop will change this value
  2c:	00000517          	auipc	a0,0x0
			2c: R_RISCV_PCREL_HI20	Input_data
			2c: R_RISCV_RELAX	*ABS*
  30:	00050513          	mv	a0,a0
			30: R_RISCV_PCREL_LO12_I	.L0 
			30: R_RISCV_RELAX	*ABS*
              lw s0, 0(a0)              # load first num to s0 / s0 will be max num
  34:	00052403          	lw	s0,0(a0) # 2c <sort>
              mv a4, a0                 # copy that addr / a4 will be addr of max
  38:	00050713          	mv	a4,a0
              li s1, 0                  # this is i and it will incremented to 0x20
  3c:	00000493          	li	s1,0
              call findmax              # findmax func sets s0 to maxnum
  40:	00000097          	auipc	ra,0x0
			40: R_RISCV_CALL	findmax
			40: R_RISCV_RELAX	*ABS*
  44:	000080e7          	jalr	ra # 40 <sort+0x14>
              sw s0, 0(a1)              # max number will stored in output
  48:	0085a023          	sw	s0,0(a1) # 14 <__start+0x8>
              sw t0, 0(a4)              # max number of input will change to -17(-inf)
  4c:	00572023          	sw	t0,0(a4)
              addi a1, a1, 4            # increment by 4 since 1w = 4B
  50:	00458593          	addi	a1,a1,4
              addi a3, a3, -1           # a3 -= 1
  54:	fff68693          	addi	a3,a3,-1
              beq a3, zero, done        # if a3 == 0 then sort is done
  58:	02068663          	beqz	a3,84 <done>
			58: R_RISCV_BRANCH	done
              j sort                    # loop
  5c:	fd1ff06f          	j	2c <sort>
			5c: R_RISCV_JAL	sort

00000060 <findmax>:
              
findmax:
              lw s2, 0(a0)              # s2 is current num
  60:	00052903          	lw	s2,0(a0)
              ble s2, s0, cont          # if current > max then don't branch(execute following)
  64:	01245663          	bge	s0,s2,70 <cont>
			64: R_RISCV_BRANCH	cont
              mv s0, s2                 # change max num
  68:	00090413          	mv	s0,s2
              mv a4, a0                 # change addr of max num
  6c:	00050713          	mv	a4,a0

00000070 <cont>:

cont:              
              addi s1, s1, 1            # s1 += 1, this is i
  70:	00148493          	addi	s1,s1,1
              beq a2, s1, break         # if a2==s1 break(return)
  74:	00960663          	beq	a2,s1,80 <break>
			74: R_RISCV_BRANCH	break
              addi a0, a0, 4            # increment addr of current num
  78:	00450513          	addi	a0,a0,4
              j findmax                 # loop
  7c:	fe5ff06f          	j	60 <findmax>
			7c: R_RISCV_JAL	findmax

00000080 <break>:

break:
              ret                       # break is return
  80:	00008067          	ret

00000084 <done>:
	...
